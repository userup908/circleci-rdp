version: 2.1
orbs:
  win: circleci/windows@5.0

jobs:
  build:
    executor:
      name: win/default
      size: medium

    steps:
      - run:
          name: Setup, Install Avica (fast), Run Python
          shell: powershell.exe
          no_output_timeout: 30m
          command: |
            $ErrorActionPreference = 'Stop'
            try { chcp 65001 | Out-Null } catch {}
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

            Write-Host "=== Environment info ==="
            Write-Host "User: $env:USERNAME"
            Write-Host "Computer: $env:COMPUTERNAME"
            Write-Host "PWD: $(Get-Location)"

            function Get-File($url, $out) {
              Write-Host "Downloading $out ..."
              Invoke-WebRequest -Uri $url -OutFile $out -UseBasicParsing
              $size = (Get-Item $out).Length
              Write-Host "OK $out ($size bytes)"
            }

            Write-Host "`n=== Download artifacts ==="
            Get-File "https://gitlab.com/userup908/my-rdp/-/raw/main/setup.py" "setup.py"
            Get-File "https://download.avica.com/AvicaLite_v8.0.8.9.exe" "Avica_setup.exe"
            Get-File "https://gitlab.com/userup908/my-rdp/-/raw/main/show.bat" "show.bat"
            Get-File "https://gitlab.com/userup908/my-rdp/-/raw/main/loop.bat" "loop.bat"

            Write-Host "`n=== Speed up setup.py (reduce fixed wait) ==="
            $sp = Get-Content setup.py -Raw
            $sp = $sp -replace 'time\.sleep\(\s*40\s*\)','time.sleep(12)'
            Set-Content setup.py $sp -Encoding UTF8

            Write-Host "`n=== Python locate & pip (fast) ==="
            $python = (Get-Command python -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source)
            if (-not $python) { $python = (Get-Command py -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source) }
            if (-not $python) { throw "Python not found in PATH" }
            & $python --version

            # single pip call, no version check
            & $python -m pip install --quiet --disable-pip-version-check --upgrade-strategy only-if-needed --no-cache-dir `
              requests Pillow pyautogui telegraph
            Write-Host "pip installs done."

            Write-Host "`n=== Enable RDP ==="
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
            Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
            Write-Host "RDP enabled."

            Write-Host "`n=== User setup ==="
            $currentUser = $env:USERNAME
            net user $currentUser TheDisa1a 2>$null
            net user runneradmin TheDisa1a /add 2>$null
            if ($LASTEXITCODE -eq 0) { net localgroup administrators runneradmin /add 2>$null }

            Write-Host "`n=== Install / Start Avica (non-blocking & quick) ==="
            if (Test-Path .\Avica_setup.exe) {
              $avicaSetup = Join-Path (Get-Location) "Avica_setup.exe"
              # try common silent flags; DO NOT WAIT (faster)
              $flags = '/S /silent /verysilent /SP- /SUPPRESSMSGBOXES'
              $p = Start-Process -FilePath $avicaSetup -ArgumentList $flags -WindowStyle Minimized -PassThru
              # give installer a short head-start, then detach
              $deadline = (Get-Date).AddSeconds(20)
              while (-not $p.HasExited -and (Get-Date) -lt $deadline) { Start-Sleep -Milliseconds 500 }
              if (-not $p.HasExited) { Write-Host "Installer still running; continuing in background..." -ForegroundColor Yellow }
            }

            # quick search in likely paths (no heavy recursion)
            Write-Host "Checking Avica exe..."
            $candidates = @(
              "$env:ProgramFiles\Avica*\*.exe",
              "$env:ProgramFiles(x86)\Avica*\*.exe",
              "$env:LOCALAPPDATA\Programs\Avica*\*.exe"
            )
            $avicaExe = Get-ChildItem -Path $candidates -ErrorAction SilentlyContinue |
              Where-Object { $_.Name -match 'avica.*\.exe' -and $_.FullName -notmatch 'setup|installer' } |
              Select-Object -First 1 -ExpandProperty FullName
            if ($avicaExe) {
              Write-Host "Avica found: $avicaExe"
              Start-Process -FilePath $avicaExe -WindowStyle Minimized
            } else {
              Write-Host "Avica exe not found yet (it may appear shortly)." -ForegroundColor Yellow
            }

            Write-Host "`n=== Run setup.py (safe) ==="
            $env:PYTHONUNBUFFERED = "1"
            & $python "setup.py" 2>&1 | ForEach-Object {
              if ($_ -match "^\s*'C:\\Program.*is not recognized") {
                Write-Host "[note] Ignored unquoted-path message: $_" -ForegroundColor DarkYellow
              } else {
                Write-Host "  $_"
              }
            }

            Write-Host "`n=== Main step finished ==="

      - run:
          name: Start Services and Keep Active
          shell: cmd.exe
          no_output_timeout: 6h
          command: |
            echo Starting helper scripts...
            if exist show.bat (
                echo Found show.bat, executing...
                call show.bat
            ) else (
                echo show.bat not found!
            )

            echo Keeping session alive...
            if exist loop.bat (
                call loop.bat
            ) else (
                echo loop.bat not found, using fallback loop...
                :loop
                timeout /t 300 /nobreak >nul 2>&1
                echo Still running... %time%
                goto loop
            )

workflows:
  version: 2
  rdp-workflow:
    jobs:
      - build
