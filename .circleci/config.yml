version: 2.1
orbs:
  win: circleci/windows@5.0

jobs:
  build:
    executor:
      name: win/default
      size: medium
    
    steps:
      - run:
          name: Setup and Install Avica
          shell: powershell.exe
          no_output_timeout: 30m
          command: |
            $env:PYTHONIOENCODING = "utf-8"
            $env:PYTHONUTF8 = "1"
            
            Write-Host "Starting Avica setup..." -ForegroundColor Green
            Write-Host "User: $env:USERNAME"
            Write-Host "Computer: $env:COMPUTERNAME"
            python --version
            
            Write-Host "Downloading Avica installer..." -ForegroundColor Yellow
            try {
                Invoke-WebRequest -Uri "https://download.avica.com/AvicaLite_v8.0.8.9.exe" -OutFile "Avica_setup.exe"
                Write-Host "Avica installer downloaded"
            } catch {
                Write-Host "Failed to download Avica installer" -ForegroundColor Red
                exit 1
            }
            
            Write-Host "Installing Python packages..." -ForegroundColor Yellow
            python -m pip install --upgrade pip --quiet
            python -m pip install requests Pillow pyautogui --quiet
            Write-Host "Packages installed"
            
            Write-Host "Enabling RDP..." -ForegroundColor Yellow
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0
            Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
            net user $env:USERNAME TheDisa1a
            Write-Host "RDP configured"
            
            Write-Host "Installing Avica..." -ForegroundColor Yellow
            if (Test-Path "Avica_setup.exe") {
                Start-Process "Avica_setup.exe" -ArgumentList "/S" -Wait -WindowStyle Hidden
                Write-Host "Avica installation completed"
                Start-Sleep -Seconds 20
            }
            
            Write-Host "Creating setup script..." -ForegroundColor Yellow
            
            $setupScript = @'
            import pyautogui as pag
            import time
            import requests
            import os
            import subprocess

            print("Starting Avica automation script...")
            time.sleep(20)

            img_filename = 'NewAvicaRemoteID.png'

            def upload_to_gofile(filename):
                url = 'https://store1.gofile.io/uploadFile'
                try:
                    with open(filename, 'rb') as f:
                        files = {'file': f}
                        response = requests.post(url, files=files)
                        response.raise_for_status()
                        result = response.json()
                        if result['status'] == 'ok':
                            link = result['data']['downloadPage']
                            with open('show.bat', 'a') as bat:
                                bat.write(f'\necho Avica Remote ID: {link}')
                            return link
                        return None
                except Exception as e:
                    print(f"Upload failed: {e}")
                    return None

            def find_avica():
                paths = [
                    r"C:\Program Files (x86)\Avica\Avica.exe",
                    r"C:\Program Files\Avica\Avica.exe",
                    r"C:\Program Files (x86)\AvicaLite\Avica.exe",
                    r"C:\Program Files\AvicaLite\Avica.exe"
                ]
                
                for path in paths:
                    if os.path.exists(path):
                        print(f"Found Avica: {path}")
                        return path
                
                for root_dir in [r"C:\Program Files", r"C:\Program Files (x86)"]:
                    try:
                        for root, dirs, files in os.walk(root_dir):
                            for file in files:
                                if file.lower() == 'avica.exe':
                                    full_path = os.path.join(root, file)
                                    print(f"Found Avica: {full_path}")
                                    return full_path
                    except:
                        continue
                
                print("Avica not found")
                return None

            def launch_avica():
                avica_path = find_avica()
                if avica_path:
                    print("Launching Avica...")
                    subprocess.Popen([avica_path])
                    time.sleep(15)
                    return True
                return False

            def focus_avica():
                try:
                    ps_cmd = 'Add-Type -TypeDefinition @"\nusing System;\nusing System.Runtime.InteropServices;\npublic class WinAPI {\n    [DllImport(\\"user32.dll\\")] public static extern bool SetForegroundWindow(IntPtr hWnd);\n    [DllImport(\\"user32.dll\\")] public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);\n}\n"@\n$procs = Get-Process | Where-Object {$_.ProcessName -like \\"*Avica*\\" -and $_.MainWindowHandle -ne 0}\nforeach ($p in $procs) {\n    [WinAPI]::ShowWindow($p.MainWindowHandle, 9)\n    [WinAPI]::SetForegroundWindow($p.MainWindowHandle)\n}'
                    subprocess.run(['powershell', '-Command', ps_cmd], timeout=10)
                    time.sleep(3)
                    return True
                except:
                    return False

            def capture_screen():
                print("Taking screenshot...")
                focus_avica()
                pag.click(500, 400)
                time.sleep(2)
                screenshot = pag.screenshot()
                screenshot.save(img_filename)
                print(f"Screenshot saved: {img_filename}")
                return True

            print("=== Avica Automation Started ===")

            if launch_avica():
                print("Avica launched successfully")
            else:
                print("Could not launch Avica, taking desktop screenshot anyway")

            print("Waiting for interface to load...")
            time.sleep(10)

            capture_screen()

            print("Uploading screenshot...")
            link = upload_to_gofile(img_filename)
            if link:
                print(f"SUCCESS! Screenshot uploaded: {link}")
            else:
                print("Upload failed")

            print("=== Process Complete ===")
            '@
            
            $setupScript | Out-File -FilePath "setup.py" -Encoding UTF8
            Write-Host "Setup script created"
            
            Write-Host "Running automation script..." -ForegroundColor Yellow
            python setup.py
            
            Write-Host "All done!" -ForegroundColor Green

      - run:
          name: Keep Session Active  
          shell: cmd.exe
          no_output_timeout: 6h
          command: |
            echo Keeping session active...
            :loop
            timeout /t 300 /nobreak >nul 2>&1
            echo Still alive at %time%
            goto loop

workflows:
  version: 2
  rdp-workflow:
    jobs:
      - build
